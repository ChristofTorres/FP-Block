<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
 
<prefwindow 
     title="FP-Block Preferences"
     xmlns:html="http://www.w3.org/1999/xhtml"
     xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

    <html:style>
	    .addon-version {
	        font-weight: bold;
	        margin: 15px;
	    }
	    
	    .about-groupbox {
	        padding-top: 15px;
	        margin-bottom: 15px;
	        max-width: 420px;
	        min-height: 330px;
	    }
	    
	    .about-info-left {
	    	float: left;
	        padding: 35px 10px 10px 10px;
	        min-width: 210px;
	        max-width: 210px;
	        text-align: center;
	    }

	    .about-info-right {
	    	float: right;
	        padding: 10px;
	        min-width: 210px;
	        max-width: 210px;
	        text-align: justify;
	    }

	    .author {
	    	margin-top: 20px;
	    	text-align: right;
	    }

	    .checkbox {
	    	width: 600px;
	    }
	</html:style>

	<prefpane label="FP-Block Preferences">
		<preferences>
			<preference id="fp-block-notify-detections" name="extensions.fpblock.notifydetections" type="bool"/>
			<preference id="fp-block-block-thirdparties" name="extensions.fpblock.blockthirdparties" type="bool"/>
			<!--<preference id="fp-block-delete-referer" name="extensions.fpblock.deletereferer" type="bool"/>-->
			<preference id="fp-block-dnt-header" name="extensions.fpblock.dntheader" type="bool"/>
			<preference id="fp-block-delete-etags" name="extensions.fpblock.deleteetags" type="bool"/>
			<preference id="fp-block-autoblock-social" name="extensions.fpblock.autoblocksocial" type="bool"/>
			<preference id="fp-block-autoblock-plugins" name="extensions.fpblock.autoblockplugins" type="bool"/>
			<preference id="fp-block-debugging-mode" name="extensions.fpblock.debuggingmode" type="bool"/>
		</preferences>

		<script>
    
			window.onload = function() {
				getAddonNameVer(function(addon) {
		            document.getElementById('version').value = addon.name + " " + addon.version;
		            var fpblockpreferences = Components.classes['@mozilla.org/preferences-service;1'].getService(Components.interfaces.nsIPrefService).getBranch('extensions.fpblock.');
		            if (fpblockpreferences.getCharPref('latestfetch') == '') {
		            	document.getElementById('latest-fetch').value = "Last time fetched: never";
		            } else {
		            	var latestfetch = new Date(parseInt(fpblockpreferences.getCharPref('latestfetch')));
		    			var day = (String(latestfetch.getDate()).length == 1) ? "0" + latestfetch.getDate() : latestfetch.getDate();
		    			var month = (String(latestfetch.getMonth() + 1).length == 1) ? "0" + (latestfetch.getMonth() + 1) : latestfetch.getMonth() + 1;
		    			var year = latestfetch.getFullYear();
						var hour = (String(latestfetch.getHours()).length == 1) ? "0" + latestfetch.getHours() : latestfetch.getHours();
						var minutes = (String(latestfetch.getMinutes()).length == 1) ? "0" + latestfetch.getMinutes() : latestfetch.getMinutes();
		    			var seconds = (String(latestfetch.getSeconds()).length == 1) ? "0" + latestfetch.getSeconds() : latestfetch.getSeconds();
		    			document.getElementById('latest-fetch').value = "Last time fetched: " + day + "/" + month + "/" + year + " " + hour + ":" + minutes + ":" + seconds;
		            }
		        });
			};
		    
		    function getAddonNameVer(callback) {
		        Components.utils.import("resource://gre/modules/AddonManager.jsm");
		        AddonManager.getAddonByID('fpblock@fingerprint.christoftorres.com', callback);
		    }

		    function blockThirdParties() {
		    	var fpblockpreferences = Components.classes['@mozilla.org/preferences-service;1'].getService(Components.interfaces.nsIPrefService).getBranch('extensions.fpblock.');
		    	var cookieBehaviour = !fpblockpreferences.getBoolPref('blockthirdparties');
		    	var firefoxpreferences = Components.classes['@mozilla.org/preferences-service;1'].getService(Components.interfaces.nsIPrefService).getBranch('network.cookie.');
		    	if (cookieBehaviour) {
		    		firefoxpreferences.setIntPref('cookieBehavior', 1);
		    	} else {
		    		firefoxpreferences.setIntPref('cookieBehavior', 0);
		    	}
		    }

		    function setDNTHeader() {
		    	var fpblockpreferences = Components.classes['@mozilla.org/preferences-service;1'].getService(Components.interfaces.nsIPrefService).getBranch('extensions.fpblock.');
		    	var enabled = !fpblockpreferences.getBoolPref('dntheader');
		    	var firefoxpreferences = Components.classes['@mozilla.org/preferences-service;1'].getService(Components.interfaces.nsIPrefService).getBranch('privacy.donottrackheader.');
		    	firefoxpreferences.setBoolPref('enabled', enabled);
		    	if (enabled) {
		    		firefoxpreferences.setIntPref('value', 1);
		    	} else {
		    		firefoxpreferences.setIntPref('value', 0);
		    	}
		    }

		    function resetDefaultSettings() {
		    	var fpblockpreferences = Components.classes['@mozilla.org/preferences-service;1'].getService(Components.interfaces.nsIPrefService).getBranch('extensions.fpblock.');
		    	// General preferences
		    	fpblockpreferences.setBoolPref('notifydetections', true);
		    	// HTTP preferences
		    	fpblockpreferences.setBoolPref('blockthirdparties', true);
		    	//fpblockpreferences.setBoolPref('deletereferer', true);
		    	fpblockpreferences.setBoolPref('dntheader', true);
		    	fpblockpreferences.setBoolPref('deleteetags', true);
		    	// JavaScript preferences
		    	fpblockpreferences.setBoolPref('autoblocksocial', false);
		    	fpblockpreferences.setBoolPref('autoblockplugins', true);
		    	// Debugging mode
		    	fpblockpreferences.setBoolPref('debuggingmode', false);

		    	var firefoxpreferences = Components.classes['@mozilla.org/preferences-service;1'].getService(Components.interfaces.nsIPrefService).getBranch('network.cookie.');
		    	firefoxpreferences.setIntPref('cookieBehavior', 1);
		    	firefoxpreferences = Components.classes['@mozilla.org/preferences-service;1'].getService(Components.interfaces.nsIPrefService).getBranch('privacy.donottrackheader.');
		    	firefoxpreferences.setBoolPref('enabled', true);
		    	firefoxpreferences.setIntPref('value', 1);
		    }

		    Components.utils.import("resource://modules/profiles.jsm");

		    function fetchLatestProfiles() {
		    	var loader = document.getElementById('ajax-loader');
				loader.style.visibility = 'visible';
				var path    = "http://christoftorres.no-ip.org/Experiments/profiles/";  
				var files   = ["chrome.json", "firefox.json", "opera.json", "safari.json"];
				var xmlhttp = new XMLHttpRequest();
				var index   = 0;
				profiles    = [];
				xmlhttp.onreadystatechange = function() {
			    	if (xmlhttp.readyState == 4) {
			    		if (xmlhttp.status == 200) {
			    			profiles.push(JSON.parse(xmlhttp.responseText));
			      			index++;
			      			if (index != files.length) {
			        			xmlhttp.open("POST", path+files[index], true);
			        			xmlhttp.send();
			      			} else {
			      				var fpblockpreferences = Components.classes['@mozilla.org/preferences-service;1'].getService(Components.interfaces.nsIPrefService).getBranch('extensions.fpblock.');
				    			fpblockpreferences.setCharPref('latestfetch', new Date().getTime());
				    			var latestfetch = new Date(parseInt(fpblockpreferences.getCharPref('latestfetch')));
				    			var day = (String(latestfetch.getDate()).length == 1) ? "0" + latestfetch.getDate() : latestfetch.getDate();
				    			var month = (String(latestfetch.getMonth() + 1).length == 1) ? "0" + (latestfetch.getMonth() + 1) : latestfetch.getMonth() + 1;
				    			var year = latestfetch.getFullYear();
								var hour = (String(latestfetch.getHours()).length == 1) ? "0" + latestfetch.getHours() : latestfetch.getHours();
								var minutes = (String(latestfetch.getMinutes()).length == 1) ? "0" + latestfetch.getMinutes() : latestfetch.getMinutes();
				    			var seconds = (String(latestfetch.getSeconds()).length == 1) ? "0" + latestfetch.getSeconds() : latestfetch.getSeconds();
				    			document.getElementById('latest-fetch').value = "Last time fetched: " + day + "/" + month + "/" + year + " " + hour + ":" + minutes + ":" + seconds;
			        			loader.style.visibility = 'hidden';
			      			}
			      		}	
			    	}
				}
				xmlhttp.open("POST", path+files[index], true);
			  	xmlhttp.send();
			}
		    
		</script>

		<tabbox id="FPBlockPreferences">
			<tabs>
			    <tab label="About"/>
			    <tab label="General Settings"/>
		  	</tabs>
			<tabpanels>
				<!-- About -->
		  		<tabpanel orient="vertical">
				  	<groupbox align="center" class="about-groupbox">
						<caption label="About"/>
						<grid>
							<columns>
								<column flex="1"/>
								<column flex="1"/>
							</columns>
							<rows>
								<row>
									<html:div class="about-info-left">
										<image src='chrome://fpblock/skin/logo.png' width='128' height='128'/>
						        		<label id="version" class="addon-version" value="Loading version..."/>
						        	</html:div>
						        	<html:div class="about-info-right">
						            	FP-Block helps you to preserve privacy on the web with respect to browser fingerptinting. FP-Block aims to keep your web identities seperate through creating unique web identites for each website you visit.<html:br/><html:br/>It allows you to block social plugins and to block individual browser plugins. Furthermore, it allows you to detect third-parties and to block, allow or spoof JavaScript attributes that a website tries to read. Please note that FP-Block is solely a proof-of-concept.
						          	</html:div>
								</row>
							</rows>
						</grid>
					</groupbox>	
					<grid>
						<columns>
							<column flex="1"/>
						</columns>
						<rows>
							<row>
								<label class="author" value="Copyright 2014 - 2015 Â© Christof Torres"/>
							</row>
						</rows>
					</grid>
				</tabpanel>
				<!-- General Settings -->
		  		<tabpanel orient="vertical">
					<grid>
						<columns>
							<column flex="1"/>
						</columns>
						<rows>
							<row>
								<label value="Manage individual web identities and their attributes:"/>
							</row>
							<row>
								<button label="Manage Web Identities" oncommand='window.openDialog("chrome://fpblock/content/webidentities.xul", "", "chrome, titlebar, toolbar, centerscreen, dialog=no, modal, resizable=yes").focus();'/>
							</row>
							<grid>
								<columns>
									<column flex="1"/>
									<column flex="2"/>
								</columns>
								<rows>
									<row>
										<button label="Fetch Latest Profiles" oncommand="fetchLatestProfiles()"/>
										<label id="latest-fetch" value="Last time fetched: " style="margin-top: 7px"/>
        								<image id="ajax-loader" src="chrome://fpblock/skin/ajax-loader.gif" width="18px" height="12px" style="visibility:hidden;margin:4px 10px 4px 10px"/>
									</row>
								</rows>
							</grid>
							<row>
								<checkbox id="notify-detections" preference="fp-block-notify-detections" label="Show a notification when a website is trying to read browser fingerprinting related attributes"/>
							</row>
						</rows>
					</grid>
					<groupbox align="center">
						<caption label="HTTP"/>
						<grid>
							<columns>
								<column flex="1"/>
							</columns>
							<rows>
								<row>
									<checkbox class="checkbox" id="block-thirdparties" preference="fp-block-block-thirdparties" label="Block third-party cookies" oncommand="blockThirdParties();"/>
									<image src='chrome://fpblock/skin/help.png' width='28' height='28' tooltiptext="Block websites from storing third-party cookies."/>
								</row>
								<!--<row>
									<checkbox class="checkbox" id="delete-referer" preference="fp-block-delete-referer" label="Remove HTTP Referer header"/>
									<image src='chrome://fpblock/skin/help.png' width='28' height='28' tooltiptext="Remove the HTTP Referer header from cross-domain requests."/>
								</row>-->
								<row>
									<checkbox class="checkbox" id="dnt-header" preference="fp-block-dnt-header" label="Send DNT (Do Not Track) header" oncommand="setDNTHeader();"/>
									<image src='chrome://fpblock/skin/help.png' width='28' height='28' tooltiptext="Send the DNT (Do Not Track) header up on every request."/>
								</row>
								<row>
									<checkbox class="checkbox" id="delete-etags" preference="fp-block-delete-etags" label="Remove HTTP ETag headers"/>
									<image src='chrome://fpblock/skin/help.png' width='28' height='28' tooltiptext="Remove all possible HTTP ETag headers from every request."/>
								</row>
							</rows>
						</grid>
					</groupbox>
					<groupbox align="center">
						<caption label="JavaScript"/>
						<grid>
							<columns>
								<column flex="1"/>
							</columns>
							<rows>
								<row>
									<checkbox class="checkbox" id="autoblock-social" preference="fp-block-autoblock-social" label="Automatically block social plugins"/>
									<image src='chrome://fpblock/skin/help.png' width='28' height='28' tooltiptext="Automatically block from websites all known social plugins e.g. Facebook, Twitter, Google+, LinkedIn, Tumblr and Pinterest."/>
								</row>
								<row>
									<checkbox class="checkbox" id="block-plugins" preference="fp-block-autoblock-plugins" label="Automatically block browser plugins"/>
									<image src='chrome://fpblock/skin/help.png' width='28' height='28' tooltiptext="Automatically block from websites all browser plugins e.g Flash Player, QuickTime Player, VLC Player, etc."/>
								</row>
							</rows>
						</grid>
					</groupbox>
					<grid>
						<columns>
							<column flex="1"/>
						</columns>
						<rows>
							<row>
								<button label="Reset Default Settings" oncommand='resetDefaultSettings();'/>
							</row>
							<row>
								<checkbox class="checkbox" id="debugging-mode" preference="fp-block-debugging-mode" label="Enable debugging mode (advanced users)"/>
							</row>
						</rows>
					</grid>
				</tabpanel>
			</tabpanels>
		</tabbox>

	</prefpane>
 
</prefwindow>
